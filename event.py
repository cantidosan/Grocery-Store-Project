"""Assignment 1 - Grocery Store Events (Task 2)

This file should contain all of the classes necessary to model the different
kinds of events in the simulation.
"""
# Feel free to import classes and functions from
# *your other files*, but remember not to import any external libraries.
from store import *

class Event:
    """An event.

    Events have an ordering based on the event timestamp in non-ascending
    order. Events with older timestamps are less than those with newer
    timestamps.

    This class is abstract; subclasses must implement do().

    You may, if you wish, change the API of this class to add
    extra public methods or attributes. Make sure that anything
    you add makes sense for ALL events, and not just a particular
    event type.

    Document any such changes carefully!

    === Attributes ===
    @type timestamp: int
        A timestamp for this event.
    """
    def __init__(self, timestamp):
        """Initialize an Event with a given timestamp.

        @type self: Event
        @type timestamp: int
            A timestamp for this event.
            Precondition: must be a non-negative integer.
        @rtype: None

        >>> Event(7).timestamp
        7
        """
        self.timestamp = timestamp

    # The following six 'magic methods' are overridden to allow for easy
    # comparison of Event instances. All comparisons simply perform the
    # same comparison on the 'timestamp' attribute of the two events.
    def __eq__(self, other):
        """Return whether this Event is equal to <other>.

        Two events are equal if they have the same timestamp.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first == second
        False
        >>> second.timestamp = first.timestamp
        >>> first == second
        True
        """
        return self.timestamp == other.timestamp

    def __ne__(self, other):
        """Return True iff this Event is not equal to <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first != second
        True
        >>> second.timestamp = first.timestamp
        >>> first != second
        False
        """
        return not self.__eq__(other)

    def __lt__(self, other):
        """Return True iff this Event is less than <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first < second
        True
        >>> second < first
        False
        """
        return self.timestamp < other.timestamp

    def __le__(self, other):
        """Return True iff this Event is less than or equal to <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first <= first
        True
        >>> first <= second
        True
        >>> second <= first
        False
        """
        return self.timestamp <= other.timestamp

    def __gt__(self, other):
        """Return True iff this Event is greater than <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first > second
        False
        >>> second > first
        True
        """
        return not self.__le__(other)

    def __ge__(self, other):
        """Return True iff this Event is greater than or equal to <other>.

        @type self: Event
        @type other: Event
        @rtype: bool

        >>> first = Event(1)
        >>> second = Event(2)
        >>> first >= first
        True
        >>> first >= second
        False
        >>> second >= first
        True
        """
        return not self.__lt__(other)

    def do(self, store):
        """Perform this Event.

        Call methods on <store> to update its state according to the
        meaning of the event. Note: the "business logic" of what actually
        happens inside a grocery store should be handled in the GroceryStore
        class, not in any Event classes.

        Return a list of new events spawned by this event (making sure the
        timestamps are correct).

        @type self: Event
        @type store: GroceryStore
        @rtype: list[Event]
            A list of events generated by performing this event.
        """
        raise NotImplementedError

# TODO: Create subclasses for the different types of events below.

class Begin_checkout(Event):
    # creating a begin checkout event to return to the simulation

    def __init__(self, timestamp, customer, checkout_line):
        super().__init__(timestamp)
        self.customer = customer
        self.checkout_line = checkout_line

    def __repr__(self):
        # string representation of the begin checkout function
        #'Timestamp:60 , Cust_id: BOb , Prod Count: 12'

        return str(self.timestamp) + " " +str(self.customer.cust_id) + " " +(self.customer.num_items)

    def do(self,store):

        events_list=[]
        #updates timestamp for finish checkout event based on the  customer object

        new_timestamp = self.checkout_line.checkout_time(self.timestamp,self.customer)

        return [Finish_checkout(new_timestamp,self.customer,self.checkout_line)]






class Finish_checkout(Event):

    """" Once the customer has reached the end of their checkout and has made payment"""

    def __init__(self,timestamp,customer,checkout_line):
        super().__init__(timestamp)
        self.customer = customer
        self.checkout_line = checkout_line

    def __repr__(self):
        #returns a string representation of the customer object which can be used to construct the object again
        #'Timestamp:60 , Cust_id: BOb , PRod Count: 12'

        return str(self.timestamp)+" "+ str(self.customer.cust_id) + " " +(self.customer.num_items)

    def do(self,store):
        "If a customer finishes checking out, the next customer in the line (if there is one) " \
        "gets a 'begin checking out' event with the same timestamp as the 'finish' event."

        #check if a customer is remaining in the line after checkout is complete
        if len(self.checkout_line) > 1 :
            new_events_list = Begin_checkout(self.timestamp,self.customer,self.checkout_line)


class Cust_arrive(Event):
    "Once the customer info is read from the file the second element is confirmed as 'Arrive'"
    ""
    def __init__(self,timestamp,cust_id,prod_count):
        super().__init__(timestamp)
        self.customer = Customer(cust_id,prod_count)

    def __repr__(self):
        #returns a string representation of the customer object which can be used to construct the object again
        #'Timestamp:60 , Cust_id: BOb , PRod Count: 12'

        return str(self.timestamp)+" "+str(self.customer.cust_id) + " " +(self.customer.num_items)

    def do(self,store):


        new_events_list =[]
        #returns the shortest checkoutline in the store
        shortest_line = store.shortest_open_line()

        # print(type(shortest_line))
        if shortest_line is None:
            raise Exception(' Store closed, no empty lines, go away')
        else:
            #ensuring that the line is below capacity for the new customer
            if shortest_line.num_cust_in_line() >= shortest_line.line_capacity:
                raise Exception('Line is full')

            # empty lines trigger both the cust_arrive
            # and finish checkout time stamps
            # Shortest_line :type checkout_line instance
            # adding new customer object to the checkout line
            shortest_line.cust_in_line_list.append(self.customer)

            if shortest_line.num_cust_in_line() == 1:

                # If a new customer joins an empty checkout line, a new "checking
                # out" event is added with the same timestamp as the join event.
                # process the customer using  the given checkout line speed

                finish_checking_out_events = Begin_checkout(self.timestamp,self.customer,shortest_line)
                #print(type(finish_checking_out_events))
                new_events_list.append(finish_checking_out_events.do(store))
                #print(type(new_events_list[0]))
                # new_events_list.append(Finish_checkout(self.timestamp,self.customer))


        # print(new_events_list)
        # print(shortest_line.cust_in_line_list)
        # shortest_line.cust_in_line_list.
        # shortest_line.Begin_checkout()


        return new_events_list


class Line_close(Event):
    "Once the checkout counter information is updated as 'Close'"


    def __init__(self,timestamp,closing_checkout_number):
        super().__init__(timestamp)
        self.closing_checkout_number = closing_checkout_number

    def __repr__(self):
        #returns a string representation of the object which can be used to construct the object again
        #'Timestamp:5 , 'Close' , Closing_checkout_number: 2'

        return  str(self.timestamp) + " " +(self.closing_checkout_number)

    def do(self,store):
        print('Im processing line_close.....')
        return []


# TODO: Complete this function, which creates a list of events from a file.
def create_event_list(filename):
        """Return a list of Events based on raw list of events in <filename>.

        Precondition: the file stored at <filename> is in the format specified
        by the assignment handout.

        @param filename: str
            The name of a file that contains the list of events.
        @rtype: list[Event]
        """
        events = []
        with open(filename, 'r') as file:

            for line in file:

                # Create a list of words in the line, e.g.
                # ['60', 'Arrive', 'Bob', '5'].
                # Note that these are strings, and you'll need to convert some of
                # them to ints.
                #in our example, token[0] ='60'
                tokens = line.split()

                if 'Arrive' == tokens[1]:
                    #create arrival event and append it to events list
                    #creating a customer arrival event
                    #tokens[0] = timestamp
                    #tokens[1] =  type of event
                    #tokens[2] =cust_id
                    #tokens[3] =  number of items in customer  basket

                    events.append(Cust_arrive(tokens[0],tokens[2],tokens[3]))

                elif 'Close' == tokens[1]:
                    #create checkoutlane closure event and add it to the events list

                    events.append(Line_close(tokens[0],tokens[2]))
                else:
                    #to account for any illogical events read
                    raise NotImplementedError




        return events


if __name__ == '__main__':
    import doctest
    doctest.testmod()

